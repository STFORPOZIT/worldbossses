<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Interactive Lines</title>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    .line {
      display: flex;
      align-items: center;
      margin-bottom: 10px;
    }
    .circle {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      margin-right: 10px;
      cursor: pointer;
    }
    .circle.active {
      background-color: green;
    }
    .circle.inactive {
      background-color: red;
    }
    input {
      margin-left: 10px;
    }
  </style>
</head>
<body>
  <h1>Interactive Lines</h1>
  <div id="lines"></div>

  <script>
    const socket = io();
    const linesContainer = document.getElementById("lines");

    // Render lines
    function renderLines(lines) {
      linesContainer.innerHTML = "";
      lines.forEach((line) => {
        const lineDiv = document.createElement("div");
        lineDiv.className = "line";

        const circle = document.createElement("div");
        circle.className = `circle ${line.active ? "active" : "inactive"}`;
        circle.addEventListener("click", () => {
          line.active = !line.active;
          socket.emit("updateLine", line); // Emit the update
        });

        const text = document.createElement("span");
        text.textContent = line.text;

        const input = document.createElement("input");
        input.type = "text";
        input.placeholder = "Enter username";
        input.value = line.username;
        input.addEventListener("input", (e) => {
          line.username = e.target.value;
          socket.emit("updateLine", line); // Emit the update
        });

        lineDiv.appendChild(circle);
        lineDiv.appendChild(text);
        lineDiv.appendChild(input);
        linesContainer.appendChild(lineDiv);
      });
    }

    // Initialize lines on connection
    socket.on("initialize", (lines) => {
      renderLines(lines);
    });

    // Update a line in real-time
    socket.on("updateLine", (updatedLine) => {
      const index = lines.findIndex((line) => line.id === updatedLine.id);
      if (index !== -1) {
        lines[index] = updatedLine;
        renderLines(lines);
      }
    });
  </script>
</body>
</html>